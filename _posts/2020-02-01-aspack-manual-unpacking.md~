---
title: ASPack manual packing
date:  2020-02-01 12:00:00
excerpt: "This post attempts to describe the approach to manual unpack a sample program packed using the ASPack packer."
---

This post attempts to describe the approach to manual unpack a program packed using the ASPack packer.

ASPack is an EXE packer created to compress Win32 executable files and to protect them against non-professional reverse engineering. Online can be found multiple resources descripting how to manually unpack a *aspacked* file. This post describe the approch which I followed using the WinDbg tool.

A free trial version of the ASPack packer can be downloaded at the official web site. For example, the 32 bit version can be found on the following URL: http://www.aspack.com/asprotect32.html. Unfortunatly, ASProtect can not be used on a VM. So, I downloaded a random ASPacked file on Internet.

Following an overview of the target file:
```
Filename: keygenme.exe
MD5: e2a1ba2227ba1dc32ac87449c0418df5
File type: PE32 executable (GUI) Intel 80386, for MS Windows
File size: 12 kb
URL: 
```

An ASPacked file can be easly detected because has the `.aspack` section. Below are shown the PE sections of the target file and his `.aspack` section:

[ . . . ]

Below is shown the (relative) entry point of the executable is `00006001`, which is located on the `.aspack` section:

[ . . . ]

In a nutshell, the following approach has been followed in order to unpack the target file:
1. Put a breakpoint on the entry point
2. Follow the first jump(s)
3. Find the *well known pattern*
4. When the breakpoint (3) triggers, the *Original Entry Point* (OEP) has been found

## 1. Find the entry point

First of all, it was calculated the entry point of the packed file.
This entry point has nothing to do with the original entry point of the unpacked file.

The entry point it was calculated using the `WinDbg` tool.
The `!peb` command displays the debugged Process Environment Block. Below is shown the `!peb` output. Specifically, the `ImageBaseAddress` contains the image base memory address.

[ . . . ]

Since the `ImageBaseAddress` (`0000000000400000`) has been found, the second part of the process entry point address should be calculated.
The `!dh` command can be used to found the `AddressOfEntryPoint`, which is defined as *the address of the entry point relative to the image base when the executable file is loaded into memory. For program images, this is the starting address*.

[ . . . ]


Using the `ImageBaseAddress` and the `AddressOfEntryPoint` it was calculated the entry point the packed file:
```
ImageBaseAddress + AddressOfEntryPoint = Entry Point
0000000000400000 + 6001                = 0000000000406001
```

During the assessment a breakpoint has been created using the following command in WinDbg:
```
> bp 00400000+6001

```


## 2. First JUMP

It was noted that some codes is executed when the program was started.
Below is shown the first code which is executed when the packed file is started:

[ . . . ]

As shown above, a call was performed to the `keygenme+0x600a`. Following this call it was performed additional jumping around memory, reaching a `jmp eax` at `` address.

[ . . . ]




## 3. RETN




## 4. Original Entry Point






